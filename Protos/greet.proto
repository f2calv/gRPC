//https://grpc.io/docs/guides/concepts/


syntax = "proto3";

//import "google/protobuf/empty.proto";

option csharp_namespace = "CasCap.Service";

package Greet;

// The greeting service definition.
service Greeter {
  
  // Unary RPCs where the client sends a single request to the server and gets a single response back, just like a normal function call.
  rpc SayHello (HelloRequest) returns (HelloResponse) {}

  //Server streaming RPCs where the client sends a request to the server and gets a stream to read a sequence of messages back.
  //The client reads from the returned stream until there are no more messages. gRPC guarantees message ordering within an individual RPC call.
  rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse) {}

  //Client streaming RPCs where the client writes a sequence of messages and sends them to the server, again using a provided stream.
  //Once the client has finished writing the messages, it waits for the server to read them and return its response.
  //Again gRPC guarantees message ordering within an individual RPC call.
  rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse) {}

  //Bidirectional streaming RPCs where both sides send a sequence of messages using a read-write stream.
  //The two streams operate independently, so clients and servers can read and write in whatever order they like:
  //for example, the server could wait to receive all the client messages before writing its responses, or it could alternately read a message then write a message,
  //or some other combination of reads and writes. The order of messages in each stream is preserved.
  rpc BidiHello(stream HelloRequest) returns (stream HelloResponse) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings.
message HelloResponse {
  string message = 1;
}

//https://developers.google.com/protocol-buffers/docs/proto3
message FullestResponse {
//Note that field numbers in the range 1 through 15 take one byte to encode, including the field number and the field's type
//(you can find out more about this in Protocol Buffer Encoding). Field numbers in the range 16 through 2047 take two bytes.
//So you should reserve the numbers 1 through 15 for very frequently occurring message elements.
//Remember to leave some room for frequently occurring elements that might be added in the future.
  string name = 1;
  reserved 3, 4, 5;
  reserved "foo", "bar";
  int32 id = 6;
  bool has_ponycopter = 7;
}